{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "4 - Docker Compose for Production",
  "steps": [
    {
      "file": "docker-compose.yml",
      "description": "This docker-compose.yml file is designed for setting up the production environment of our application.\r\n\r\nIt outlines configurations for an Angular frontend, a Spring Boot backend, and a MySQL database, optimized for performance and security.\r\n\r\nThe setup ensures stable and efficient operation, with considerations for secure networking, persistent data storage, and streamlined service deployment. \r\n\r\nSince we already detailed the file in charge of setting the dev environment, we will focus on the changes linked to the production environment.",
      "line": 1
    },
    {
      "file": "docker-compose.yml",
      "description": "The target: prod in the build context indicates that the Docker build should use the prod stage defined in the Angular Dockerfile.\r\n\r\nAs we saw on the tour of this Dockerfile, this stage is optimized for production, without the additional development dependencies.",
      "line": 5
    },
    {
      "file": "docker-compose.yml",
      "description": "The CONFIGURATION: production argument suggests that the Angular CLI will compile the application using production settings, which as we saw in the Angular Dockerfile is suited for prod as expected.",
      "line": 7
    },
    {
      "file": "docker-compose.yml",
      "description": "The port mapping 4200:4200 is standard for both development and production. \r\n\r\nHowever, in production, you typically would not map the port directly but rather use a reverse proxy or load balancer in front of the application (I won't provide further explaination on this subject).",
      "line": 11
    },
    {
      "file": "docker-compose.yml",
      "description": "The working_dir: /app directive in the production Docker Compose file plays a crucial role in ensuring a consistent and predictable environment for both the frontend and backend services.\r\n\r\nBy setting /app as the working directory for these services, we establish a standardized location inside the Docker container where the application's executable files and resources reside.\r\n\r\nThis configuration simplifies command execution and path references within the Docker container.\r\n\r\nFor instance, when commands are run within the container, they will be executed in the context of /app, eliminating the need for full path specifications and reducing potential errors related to file paths.\r\n\r\nThe choice of /app as the working directory aligns with common Docker practices, providing clarity and enhancing maintainability.\r\n\r\nIt helps developers and system administrators alike to quickly understand the container's internal structure, knowing where the application's core files are located.\r\n\r\nFurthermore, aligning this setting with the WORKDIR specified in the Dockerfiles for the frontend and backend ensures consistency across the entire application lifecycle, from development to production. This uniformity is vital in production environments to minimize unexpected behavior and facilitate smoother deployments and operations.\r\n\r\nOverall, working_dir: /app is a choice aiming at optimizing the production environment for reliability and ease of use, reflecting best practices in Docker container configuration.",
      "line": 12
    },
    {
      "file": "docker-compose.yml",
      "description": "The context: ./java_21 gives the directory for the backend service,  containing a production-ready version of the application thanks to the Dockerfile.\r\n\r\nThe target: production indicates that the Docker build for the backend service should use the production stage in the Dockerfile. You may refer to the code tour of the Spring Dockerfile to see the production stage.",
      "line": 20
    },
    {
      "file": "docker-compose.yml",
      "description": "The production port configuration 8080:8080 is standard, similar to development, but then again, as for the frontend you might typically use a reverse proxy in a production deployment.",
      "line": 28
    },
    {
      "file": "docker-compose.yml",
      "description": "In both the backend and mysqldb service configurations, several environment variables are set up to facilitate database connectivity and configuration. While these variables are essential for the functioning of the services, they also present potential security concerns.\r\n\r\nBeing a project made for students to learn about Docker and its features, I thought it would be wise to talk about how we could secure this production file in a better way, giving a few recommendations.\r\n\r\n",
      "line": 48
    },
    {
      "file": "docker-compose.yml",
      "description": "Hardcoded Credentials:\r\n\r\nThe use of hardcoded credentials, such as MYSQL_ROOT_PASSWORD: root, MYSQL_USER: yvens, and MYSQL_PASSWORD: yvens_password, is a significant security risk. \r\nShould the Docker Compose file be exposed or stored in a version control system, these credentials could be compromised.\r\n\r\nRecommendation:\r\nUse Docker secrets or environment variables injected at runtime for sensitive data. Avoid checking in passwords and other sensitive information into source control. For Docker Compose, consider using an .env file to store sensitive values and reference these values in the Compose file.\r\n\r\n\r\nExposed and Published Ports:\r\n\r\nThe MySQL service exposes and publishes port 3306, which might not be necessary if it's only accessed by other services within the Docker Compose network. \r\n\r\nRecommendation:\r\nConsider removing the ports directive if external access isn't required, and rely on Docker's internal networking for inter-service communication.\r\n\r\n\r\nRedundant MYSQL_HOST Environment Variable:\r\n\r\nThe MYSQL_HOST environment variable in the mysqldb service is redundant and could be misleading.\r\n\r\nRecommendation: \r\nRemoving the MYSQL_HOST environment variable from the mysqldb service would be a good idea. Since this service is the database itself, it does not require its own host information for internal operation.",
      "line": 53,
      "selection": {
        "start": {
          "line": 7,
          "character": 1
        },
        "end": {
          "line": 7,
          "character": 352
        }
      }
    }
  ],
  "ref": "code-tour"
}